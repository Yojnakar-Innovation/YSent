@model YSent.Models.EmailModel

@{
    ViewData["Title"] = Model.Id > 0 ? "Edit Draft" : "Send Email";
}

<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet" />
<!-- jQuery (required for some custom scripts) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>

<!-- Quill.js -->
<link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet" />
<script src="https://cdn.quilljs.com/1.3.6/quill.min.js"></script>

<!-- Font Awesome -->
<link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet" />

<!-- Navigation Bar (if needed, or placed in a shared layout) -->
<nav class="navbar navbar-expand-lg navbar-light bg-light">
    <div class="container">
        <a class="navbar-brand" href="#">MailBox</a>
        <button class="navbar-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navbarNav"
                aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav ms-auto">
                <li class="nav-item">
                    <a class="nav-link" asp-area="" asp-controller="Email" asp-action="MailBox">All Mails</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" asp-area="" asp-controller="Email" asp-action="Send">Start New Service</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" asp-area="" asp-controller="Home" asp-action="Abc">All Templates</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" asp-area="" asp-controller="List" asp-action="Index">EMail List</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" asp-area="" asp-controller="Home" asp-action="BlackList">Black List</a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" asp-area="" asp-controller="Email" asp-action="Sent">Results</a>
                </li>
            </ul>
        </div>
    </div>
</nav>

<section id="service-details" class="service-details section mt-4">
    <div class="container">
        <div class="row gy-4">
            <div class="col-lg-3">
                <!-- Sidebar Menu -->
                <div class="sidebar">
                    <div class="sidebar-header">
                        <h4>Menu</h4>
                    </div>
                    <div class="services-list">
                        <a class="nav-link text-dark" asp-area="" asp-controller="Email" asp-action="MailBox">All Mails</a>
                        <a class="nav-link text-bg-dark" asp-area="" asp-controller="Email" asp-action="Send">New Mail Service</a>
                        <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="Abc">All Templates</a>
                        <a class="nav-link text-dark" asp-area="" asp-controller="List" asp-action="Index">EMail List</a>
                        <a class="nav-link text-dark" asp-area="" asp-controller="Home" asp-action="BlackList">Black List</a>
                        <a class="nav-link text-dark" asp-area="" asp-controller="Email" asp-action="Sent">Results</a>
                    </div>
                </div>
            </div>
            <div class="col-md-9">
                @* Display validation summary 
                <div asp-validation-summary="All" class="text-danger"></div>*@

                @if (TempData["Message"] != null)
                {
                    <div class="alert alert-success">@TempData["Message"]</div>
                }
                @if (TempData["Error"] != null)
                {
                    <div class="alert alert-danger">@TempData["Error"]</div>
                }

                <form asp-action="Send" method="post" id="send-email-form" >
                    <input type="hidden" asp-for="Id" />
                    <input type="hidden" asp-for="IsDraft" id="isDraft" />

                    <div class="mb-3">
                        <label asp-for="SelectedListName" class="form-label">Choose Mailing List:</label>
                        <select asp-for="SelectedListName" class="form-select">
                            <option value="">-- Select a Mailing List --</option>
                            @if (Model.AvailableMailingLists != null)
                            {
                                @foreach (var list in Model.AvailableMailingLists)
                                {
                                    <option value="@list">@list</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label asp-for="RecipientEmails" class="form-label">Recipients:</label>
                        <textarea asp-for="RecipientEmails" class="form-control" rows="2"></textarea>
                        <span asp-validation-for="RecipientEmails" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Subject" class="form-label"></label>
                        <input asp-for="Subject" class="form-control" required />
                        <span asp-validation-for="Subject" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="TemplateId" class="form-label">Choose Template:</label>
                        <select asp-for="TemplateId" class="form-select">
                            <option value="">-- Select a Template --</option>
                            @if (Model.AvailableTemplates != null)
                            {
                                @foreach (var template in Model.AvailableTemplates)
                                {
                                    <option value="@template.Id">@template.TemplateName</option>
                                }
                            }
                        </select>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Body" class="form-label"></label>
                        <div id="quill-editor" style="height: 300px;"></div>
                        <input type="hidden" asp-for="Body" id="html-content" />
                        <span asp-validation-for="Body" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <button type="submit" class="btn btn-primary" onclick="setDraft(false)">
                            @(Model.Id > 0 ? "Update and Send" : "Send")
                        </button>
                        <button type="submit" class="btn btn-secondary" onclick="setDraft(true)">
                            @(Model.Id > 0 ? "Update Draft" : "Save as Draft")
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</section>

<!-- JavaScript: Quill Editor Initialization, Template and Mailing List Handlers, and Form Submission -->
<script>
    // Make setDraft a global function so it can be called from the button onclick.
    function setDraft(isDraft) {
        document.getElementById('isDraft').value = isDraft;
    }

    document.addEventListener('DOMContentLoaded', function () {
        const isDraftField = document.getElementById('isDraft');
        const sendEmailForm = document.getElementById('send-email-form');
        const htmlContentField = document.getElementById('html-content');
        const templateIdSelect = document.getElementById('TemplateId');
        const selectedListField = document.getElementById('SelectedListName');
        const recipientEmailsField = document.getElementById('RecipientEmails');

        // Initialize the Quill editor.
        const quill = new Quill('#quill-editor', {
            theme: 'snow',
            modules: {
                toolbar: [
                    ['bold', 'italic', 'underline', 'strike'],
                    ['blockquote', 'code-block'],
                    ['link', 'image'],
                    [{ header: 1 }, { header: 2 }],
                    [{ list: 'ordered' }, { list: 'bullet' }],
                    [{ indent: '-1' }, { indent: '+1' }],
                    [{ align: [] }],
                    ['clean']
                ]
            }
        });

        // Handle image uploads via the Quill toolbar.
        const toolbar = quill.getModule('toolbar');
        toolbar.addHandler('image', function () {
            const fileInput = document.createElement('input');
            fileInput.type = 'file';
            fileInput.accept = 'image/*';

            fileInput.addEventListener('change', function (e) {
                const file = e.target.files[0];
                if (!file) return;

                const formData = new FormData();
                formData.append('file', file);

                fetch('/Home/UploadImage', {
                    method: 'POST',
                    body: formData
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.url) {
                            const range = quill.getSelection();
                            quill.insertEmbed(range.index, 'image', data.url);
                        } else if (data.error) {
                            alert(data.error);
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        alert('Image upload failed.');
                    });
            });

            fileInput.click();
        });

        // Template selection: load content from the selected template.
        templateIdSelect.addEventListener('change', function () {
            const templateId = templateIdSelect.value;
            if (!templateId) return;

            fetch(`/Email/GetTemplateContent?templateId=${templateId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.content) {
                        quill.root.innerHTML = data.content;
                        htmlContentField.value = data.content;
                    }
                })
                .catch(error => {
                    console.error('Error loading template:', error);
                    alert('Failed to load template content.');
                });
        });

        // Mailing list selection: merge emails from the selected list.
        selectedListField.addEventListener('change', function () {
            const selectedList = selectedListField.value;
            if (!selectedList) return;

            fetch(`/Email/GetEmails?listName=${encodeURIComponent(selectedList)}`)
                .then(response => response.json())
                .then(emails => {
                    const currentEmails = recipientEmailsField.value
                        .split(/[,;\n]/)
                        .map(e => e.trim())
                        .filter(e => e);
                    const newEmails = emails.filter(email => !currentEmails.includes(email));
                    if (newEmails.length > 0) {
                        const allEmails = [...currentEmails, ...newEmails];
                        recipientEmailsField.value = allEmails.join(', ');
                    }
                })
                .catch(error => {
                    console.error('Error fetching emails:', error);
                    alert('Failed to load emails from the selected list.');
                });
        });

        // If editing a draft, load the existing content into the Quill editor.
        const initialContent = htmlContentField.value;
        if (initialContent) {
            quill.root.innerHTML = initialContent;
        }

        // Form submission: update the hidden field with Quill's content and submit.
        sendEmailForm.addEventListener('submit', function (e) {
            e.preventDefault();
            htmlContentField.value = quill.root.innerHTML;

            // If the form is not a draft and fails HTML5 validation, add Bootstrap validation classes.
            const isDraft = (isDraftField.value === 'true');
            if (!isDraft && !sendEmailForm.checkValidity()) {
                sendEmailForm.classList.add('was-validated');
                return false;
            }
            sendEmailForm.submit();
        });
    });
</script>

@{
    await Html.RenderPartialAsync("_ValidationScriptsPartial");
}
